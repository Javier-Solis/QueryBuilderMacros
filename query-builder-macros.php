<?php

use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Database\Eloquent\Builder as EloquentBuilder;
use Illuminate\Database\Query\Builder as Builder;
use Illuminate\Database\Query\Expression;
use Illuminate\Database\Query\Grammars\Grammar;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;

if (!Builder::hasMacro('getSelect')) {
    /**
     * Get the columns selected.
     *
     * @param  array|mixed  $columns
     * @return $this
     */
    Builder::macro('getSelect', function ($columns = ['*']) {
        if ($columns === ['*']) {
            return $this->columns;
        }

        return array_intersect((array) $columns, $this->columns);
    });
}

if (!Builder::hasMacro('removeSelectRaw')) {
    /**
     * Remove a new "raw" select expression from the query.
     *
     * @param  string  $expression
     * @param  array   $bindings
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeSelectRaw', function ($expression, array $bindings = []) {
        $this->removeSelect(new Expression($expression));

        if ($bindings) {
            $this->removeBinding($bindings, 'select');
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeSelectSub')) {
    /**
     * Remove a subselect expression to the query.
     *
     * @param  \Closure|\Illuminate\Database\Query\Builder|string $query
     * @param  string  $as
     * @return \Illuminate\Database\Query\Builder|static
     *
     * @throws \InvalidArgumentException
     */
    Builder::macro('removeSelectSub', function ($query, $as) {
        // If the given query is a Closure, we will execute it while passing in a new
        // query instance to the Closure. This will give the developer a chance to
        // format and work with the query before we cast it to a raw SQL string.
        if ($query instanceof Closure) {
            $callback = $query;

            $callback($query = $this->newQuery());
        }

        // Here, we will parse this query into an SQL string and an array of bindings
        // so we can add it to the query builder using the selectRaw method so the
        // query is included in the real SQL generated by this builder instance.
        list($query, $bindings) = $this->parseSubSelect($query);

        return $this->selectRaw(
            '(' . $query . ') as ' . $this->grammar->wrap($as), $bindings
        );
    });
}

if (!Builder::hasMacro('removeSelect')) {
    /**
     * Remove an old select column from the query.
     *
     * @param  array|mixed  $column
     * @return $this
     */
    Builder::macro('removeSelect', function ($column) {
        $column = is_array($column) ? $column : func_get_args();

        $this->columns = array_diff((array) $this->columns, $column);

        return $this;
    });
}

if (!Builder::hasMacro('removeBinding')) {
    /**
     * Add a binding to the query.
     *
     * @param  mixed   $value
     * @param  string  $type
     * @return $this
     *
     * @throws \InvalidArgumentException
     */
    Builder::macro('removeBinding', function ($value, $type = 'where') {
        if (!array_key_exists($type, $this->bindings)) {
            throw new InvalidArgumentException("Invalid binding type: {$type}.");
        }

        $this->bindings[$type] = array_values(array_diff($this->bindings[$type], (array) $value));

        return $this;
    });
}

if (!Builder::hasMacro('getDistinct')) {
    /**
     * Force the query to only return distinct results.
     *
     * @return $this
     */
    Builder::macro('getDistinct', function () {
        return $this->distinct;
    });
}

if (!Builder::hasMacro('getFrom')) {
    /**
     * Set the table which the query is targeting.
     *
     * @param  string  $table
     * @return $this
     */
    Builder::macro('getFrom', function () {
        $this->from;
    });
}

if (!Builder::hasMacro('removeJoin')) {
    /**
     * Add a join clause to the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @param  string  $type
     * @param  bool    $where
     * @return $this
     */
    Builder::macro('removeJoin', function ($table, $first, $operator = null, $second = null, $type = 'inner', $where = false) {
        $join = new JoinClause($this, $type, $table);

        // If the first "column" of the join is really a Closure instance the developer
        // is trying to build a join with a complex "on" clause containing more than
        // one condition, so we'll add the join and call a Closure with the query.
        if ($first instanceof Closure) {
            call_user_func($first, $join);

            $this->joins = array_values(array_filter($this->joins, function ($current) use ($join) {
                return $current === $join;
            }));

            $this->removeBinding($join->getBindings(), 'join');
        }

        // If the column is simply a string, we can assume the join simply has a basic
        // "on" clause with a single condition. So we will just build the join with
        // this simple join clauses attached to it. There is not a join callback.
        else {
            $method = $where ? 'where' : 'on';

            $join = $join->{'remove' . ucfirst($method)}($first, $operator, $second);

            $this->joins = array_values(array_filter($this->joins, function ($current) use ($join) {
                return $current === $join;
            }));

            $this->removeBinding($join->getBindings(), 'join');
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeJoinWhere')) {
    /**
     * Remove a "join where" clause from the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @param  string  $type
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeJoinWhere', function ($table, $first, $operator, $second, $type = 'inner') {
        return $this->removeJoin($table, $first, $operator, $second, $type, true);
    });
}

if (!Builder::hasMacro('removeLeftJoin')) {
    /**
     * Remove a left join from the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeLeftJoin', function ($table, $first, $operator = null, $second = null) {
        return $this->removeJoin($table, $first, $operator, $second, 'left');
    });
}

if (!Builder::hasMacro('removeLeftJoinWhere')) {
    /**
     * Remove a "join where" clause from the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeLeftJoinWhere', function ($table, $first, $operator, $second) {
        return $this->removeJoinWhere($table, $first, $operator, $second, 'left');
    });
}

if (!Builder::hasMacro('removeRightJoin')) {
    /**
     * Remove a right join from the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeRightJoin', function ($table, $first, $operator = null, $second = null) {
        return $this->removeJoin($table, $first, $operator, $second, 'right');
    });
}

if (!Builder::hasMacro('removeRightJoinWhere')) {
    /**
     * Remove a "right join where" clause to the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeRightJoinWhere', function ($table, $first, $operator, $second) {
        return $this->removeJoinWhere($table, $first, $operator, $second, 'right');
    });
}

if (!Builder::hasMacro('removeCrossJoin')) {
    /**
     * Remove a "cross join" clause to the query.
     *
     * @param  string  $table
     * @param  string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeCrossJoin', function ($table, $first = null, $operator = null, $second = null) {
        if ($first) {
            return $this->removeJoin($table, $first, $operator, $second, 'cross');
        }

        $join = new JoinClause($this, 'cross', $table);

        $this->joins = array_values(array_filter($this->joins, function ($current) use ($join) {
            return $current === $join;
        }));

        return $this;
    });
}

if (!Builder::hasMacro('diffWheres')) {
    /**
     * Diff an array of where clauses and bindings.
     *
     * @param  array  $wheres
     * @param  array  $bindings
     * @return void
     */
    Builder::macro('diffWheres', function ($wheres, $bindings) {
        $this->wheres = array_diff($this->wheres, (array) $wheres);

        $this->bindings['where'] = array_values(
            array_diff($this->bindings['where'], (array) $bindings)
        );
    });
}

if (!Builder::hasMacro('removeWhere')) {
    /**
     * Remove a basic where clause to the query.
     *
     * @param  string|array|\Closure  $column
     * @param  string  $operator
     * @param  mixed   $value
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeWhere', function ($column, $operator = null, $value = null, $boolean = 'and') {
        // If the column is an array, we will assume it is an array of key-value pairs
        // and can add them each as a where clause. We will maintain the boolean we
        // received when the method was called and pass it into the nested where.
        if (is_array($column)) {
            return $this->removeArrayOfWheres($column, $boolean);
        }

        // Here we will make some assumptions about the operator. If only 2 values are
        // passed to the method, we will assume that the operator is an equals sign
        // and keep going. Otherwise, we'll require the operator to be passed in.
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        // If the columns is actually a Closure instance, we will assume the developer
        // wants to begin a nested where statement which is wrapped in parenthesis.
        // We'll add that Closure to the query then return back out immediately.
        if ($column instanceof Closure) {
            return $this->removeWhereNested($column, $boolean);
        }

        // If the given operator is not found in the list of valid operators we will
        // assume that the developer is just short-cutting the '=' operators and
        // we will set the operators to '=' and set the values appropriately.
        if ($this->invalidOperator($operator)) {
            list($value, $operator) = [$operator, '='];
        }

        // If the value is a Closure, it means the developer is performing an entire
        // sub-select within the query and we will need to compile the sub-select
        // within the where clause to get the appropriate query record results.
        if ($value instanceof Closure) {
            return $this->removeWhereSub($column, $operator, $value, $boolean);
        }

        // If the value is "null", we will just assume the developer wants to add a
        // where null clause to the query. So, we will allow a short-cut here to
        // that method for convenience so the developer doesn't have to check.
        if (is_null($value)) {
            return $this->removeWhereNull($column, $boolean, $operator != '=');
        }

        // If the column is making a JSON reference we'll check to see if the value
        // is a boolean. If it is, we'll add the raw boolean string as an actual
        // value to the query to ensure this is properly handled by the query.
        if (Str::contains($column, '->') && is_bool($value)) {
            $value = new Expression($value ? 'true' : 'false');
        }

        // Now that we are working with just a simple query we can put the elements
        // in our array and add the query binding to our array of bindings that
        // will be bound to each SQL statements when it is finally executed.
        $type = 'Basic';

        $where = compact(
            'type', 'column', 'operator', 'value', 'boolean'
        );

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current !== $where;
        }));

        if (!$value instanceof Expression) {
            $this->removeBinding($value, 'where');
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeArrayOfWheres')) {
    /**
     * Remove an array of where clauses from the query.
     *
     * @param  array  $column
     * @param  string  $boolean
     * @param  string  $method
     * @return $this
     */
    Builder::macro('removeArrayOfWheres', function ($column, $boolean, $method = 'where') {
        return $this->removeWhereNested(function ($query) use ($column, $method, $boolean) {
            foreach ($column as $key => $value) {
                if (is_numeric($key) && is_array($value)) {
                    $query->{'remove' . ucfirst($method)}(...array_values($value));
                } else {
                    $query->{'remove' . ucfirst($method)}($key, '=', $value, $boolean);
                }
            }
        }, $boolean);
    });
}

if (!Builder::hasMacro('removeOrWhere')) {
    /**
     * Remove an "or where" clause from the query.
     *
     * @param  string|array|\Closure  $column
     * @param  string  $operator
     * @param  mixed   $value
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhere', function ($column, $operator = null, $value = null) {
        return $this->removeWhere($column, $operator, $value, 'or');
    });
}

if (!Builder::hasMacro('removeWhereColumn')) {
    /**
     * Remove a "where" clause comparing two columns from the query.
     *
     * @param  string|array  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @param  string|null  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereColumn', function ($first, $operator = null, $second = null, $boolean = 'and') {
        // If the column is an array, we will assume it is an array of key-value pairs
        // and can add them each as a where clause. We will maintain the boolean we
        // received when the method was called and pass it into the nested where.
        if (is_array($first)) {
            return $this->removeArrayOfWheres($first, $boolean, 'whereColumn');
        }

        // If the given operator is not found in the list of valid operators we will
        // assume that the developer is just short-cutting the '=' operators and
        // we will set the operators to '=' and set the values appropriately.
        if ($this->invalidOperator($operator)) {
            list($second, $operator) = [$operator, '='];
        }

        // Finally, we will add this where clause into this array of clauses that we
        // are building for the query. All of them will be compiled via a grammar
        // once the query is about to be executed and run against the database.
        $type = 'Column';

        $where = compact(
            'type', 'first', 'operator', 'second', 'boolean'
        );

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        return $this;
    });
}

if (!Builder::hasMacro('removeOrWhereColumn')) {
    /**
     * Remove an "or where" clause comparing two columns from the query.
     *
     * @param  string|array  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereColumn', function ($first, $operator = null, $second = null) {
        return $this->removeWhereColumn($first, $operator, $second, 'or');
    });
}

if (!Builder::hasMacro('removeWhereRaw')) {
    /**
     * Remove a raw where clause from the query.
     *
     * @param  string  $sql
     * @param  mixed   $bindings
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeWhereRaw', function ($sql, $bindings = [], $boolean = 'and') {
        $where = ['type' => 'raw', 'sql' => $sql, 'boolean' => $boolean];

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding((array) $bindings, 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeOrWhereRaw')) {
    /**
     * Remove a raw or where clause from the query.
     *
     * @param  string  $sql
     * @param  mixed   $bindings
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereRaw', function ($sql, $bindings = []) {
        return $this->removeWhereRaw($sql, $bindings, 'or');
    });
}

if (!Builder::hasMacro('removeWhereIn')) {
    /**
     * Remove a "where in" clause from the query.
     *
     * @param  string  $column
     * @param  mixed   $values
     * @param  string  $boolean
     * @param  bool    $not
     * @return $this
     */
    Builder::macro('removeWhereIn', function ($column, $values, $boolean = 'and', $not = false) {
        $type = $not ? 'NotIn' : 'In';

        if ($values instanceof EloquentBuilder) {
            $values = $values->getQuery();
        }

        // If the value is a query builder instance we will assume the developer wants to
        // look for any values that exists within this given query. So we will add the
        // query accordingly so that this query is properly executed when it is run.
        if ($values instanceof self) {
            return $this->removeWhereInExistingQuery(
                $column, $values, $boolean, $not
            );
        }

        // If the value of the where in clause is actually a Closure, we will assume that
        // the developer is using a full sub-select for this "in" statement, and will
        // execute those Closures, then we can re-construct the entire sub-selects.
        if ($values instanceof Closure) {
            return $this->removeWhereInSub($column, $values, $boolean, $not);
        }

        // Next, if the value is Arrayable we need to cast it to its raw array form so we
        // have the underlying array value instead of an Arrayable object which is not
        // able to be added as a binding, etc. We will then add to the wheres array.
        if ($values instanceof Arrayable) {
            $values = $values->toArray();
        }

        $where = compact('type', 'column', 'values', 'boolean');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        // Finally we'll add a binding for each values unless that value is an expression
        // in which case we will just skip over it since it will be the query as a raw
        // string and not as a parameterized place-holder to be replaced by the PDO.
        foreach ($values as $value) {
            if (!$value instanceof Expression) {
                $this->removeBinding($value, 'where');
            }
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeOrWhereIn')) {
    /**
     * Remove an "or where in" clause from the query.
     *
     * @param  string  $column
     * @param  mixed   $values
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereIn', function ($column, $values) {
        return $this->removeWhereIn($column, $values, 'or');
    });
}

if (!Builder::hasMacro('removeWhereNotIn')) {
    /**
     * Remove a "where not in" clause from the query.
     *
     * @param  string  $column
     * @param  mixed   $values
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereNotIn', function ($column, $values, $boolean = 'and') {
        return $this->removeWhereIn($column, $values, $boolean, true);
    });
}

if (!Builder::hasMacro('removeOrWhereNotIn')) {
    /**
     * Remove an "or where not in" clause from the query.
     *
     * @param  string  $column
     * @param  mixed   $values
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereNotIn', function ($column, $values) {
        return $this->removeWhereNotIn($column, $values, 'or');
    });
}

if (!Builder::hasMacro('removeWhereInSub')) {
    /**
     * Remove a where in with a sub-select from the query.
     *
     * @param  string   $column
     * @param  \Closure $callback
     * @param  string   $boolean
     * @param  bool     $not
     * @return $this
     */
    Builder::macro('removeWhereInSub', function ($column, Closure $callback, $boolean, $not) {
        $type = $not ? 'NotInSub' : 'InSub';

        // To create the exists sub-select, we will actually create a query and call the
        // provided callback with the query so the developer may set any of the query
        // conditions they want for the in clause, then we'll put it in this array.
        call_user_func($callback, $query = $this->newQuery());

        $where = compact('type', 'column', 'query', 'boolean');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding($query->getBindings(), 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeWhereInExistingQuery')) {
    /**
     * Add an external sub-select to the query.
     *
     * @param  string   $column
     * @param  \Illuminate\Database\Query\Builder|static  $query
     * @param  string   $boolean
     * @param  bool     $not
     * @return $this
     */
    Builder::macro('removeWhereInExistingQuery', function ($column, $query, $boolean, $not) {
        $type = $not ? 'NotInSub' : 'InSub';

        $where = compact('type', 'column', 'query', 'boolean');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding($query->getBindings(), 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeWhereNull')) {
    /**
     * Remove a "where null" clause from the query.
     *
     * @param  string  $column
     * @param  string  $boolean
     * @param  bool    $not
     * @return $this
     */
    Builder::macro('removeWhereNull', function ($column, $boolean = 'and', $not = false) {
        $type = $not ? 'NotNull' : 'Null';

        $where = compact('type', 'column', 'boolean');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        return $this;
    });
}

if (!Builder::hasMacro('removeOrWhereNull')) {
    /**
     * Remove an "or where null" clause from the query.
     *
     * @param  string  $column
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereNull', function ($column) {
        return $this->removeWhereNull($column, 'or');
    });
}

if (!Builder::hasMacro('removeWhereNotNull')) {
    /**
     * Remove a "where not null" clause from the query.
     *
     * @param  string  $column
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereNotNull', function ($column, $boolean = 'and') {
        return $this->removeWhereNull($column, $boolean, true);
    });
}

if (!Builder::hasMacro('removeWhereBetween')) {
    /**
     * Remove a where between statement from the query.
     *
     * @param  string  $column
     * @param  array   $values
     * @param  string  $boolean
     * @param  bool  $not
     * @return $this
     */
    Builder::macro('removeWhereBetween', function ($column, array $values, $boolean = 'and', $not = false) {
        $type = 'between';

        $where = compact('column', 'type', 'boolean', 'not');

        $this->removeBinding($values, 'where');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        return $this;
    });
}

if (!Builder::hasMacro('removeOrWhereBetween')) {
    /**
     * Remove an or where between statement from the query.
     *
     * @param  string  $column
     * @param  array   $values
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereBetween', function ($column, array $values) {
        return $this->removeWhereBetween($column, $values, 'or');
    });
}

if (!Builder::hasMacro('removeWhereNotBetween')) {
    /**
     * Remove a where not between statement from the query.
     *
     * @param  string  $column
     * @param  array   $values
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereNotBetween', function ($column, array $values, $boolean = 'and') {
        return $this->removeWhereBetween($column, $values, $boolean, true);
    });
}

if (!Builder::hasMacro('removeOrWhereNotBetween')) {
    /**
     * Remove an or where not between statement from the query.
     *
     * @param  string  $column
     * @param  array   $values
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereNotBetween', function ($column, array $values) {
        return $this->removeWhereNotBetween($column, $values, 'or');
    });
}

if (!Builder::hasMacro('removeOrWhereNotNull')) {
    /**
     * Remove an "or where not null" clause from the query.
     *
     * @param  string  $column
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereNotNull', function ($column) {
        return $this->removeWhereNotNull($column, 'or');
    });
}

if (!Builder::hasMacro('removeWhereDate')) {
    /**
     * Remove a "where date" statement from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereDate', function ($column, $operator, $value = null, $boolean = 'and') {
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        return $this->removeDateBasedWhere('Date', $column, $operator, $value, $boolean);
    });
}

if (!Builder::hasMacro('removeOrWhereDate')) {
    /**
     * Remove an "or where date" statement to the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  string  $value
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereDate', function ($column, $operator, $value) {
        return $this->removeWhereDate($column, $operator, $value, 'or');
    });
}

if (!Builder::hasMacro('removeWhereTime')) {
    /**
     * Remove a "where time" statement from the query.
     *
     * @param  string  $column
     * @param  string   $operator
     * @param  int   $value
     * @param  string   $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhreTime', function ($column, $operator, $value, $boolean = 'and') {
        return $this->removeDateBasedWhere('Time', $column, $operator, $value, $boolean);
    });
}

if (!Builder::hasMacro('removeOrWhereTime')) {
    /**
     * Remove an "or where time" statement from the query.
     *
     * @param  string  $column
     * @param  string   $operator
     * @param  int   $value
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereTime', function ($column, $operator, $value) {
        return $this->removeWhereTime($column, $operator, $value, 'or');
    });
}

if (!Builder::hasMacro('removeWhereDay')) {
    /**
     * Remove a "where day" statement from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereDay', function ($column, $operator, $value = null, $boolean = 'and') {
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        return $this->removeDateBasedWhere('Day', $column, $operator, $value, $boolean);
    });
}

if (!Builder::hasMacro('removeWhereMonth')) {
    /**
     * Remove a "where month" statement from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereMonth', function ($column, $operator, $value = null, $boolean = 'and') {
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        return $this->removeDateBasedWhere('Month', $column, $operator, $value, $boolean);
    });
}

if (!Builder::hasMacro('removeWhereYear')) {
    /**
     * Remove a "where year" statement from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereYear', function ($column, $operator, $value = null, $boolean = 'and') {
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        return $this->removeDateBasedWhere('Year', $column, $operator, $value, $boolean);
    });
}

if (!Builder::hasMacro('removeDateBasedWhere')) {
    /**
     * Remove a date based (year, month, day, time) statement from the query.
     *
     * @param  string  $type
     * @param  string  $column
     * @param  string  $operator
     * @param  int  $value
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeDateBasedWhere', function ($type, $column, $operator, $value, $boolean = 'and') {
        $where = compact('column', 'type', 'boolean', 'operator', 'value');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding($value, 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeWhereNested')) {
    /**
     * Remove a nested where statement from the query.
     *
     * @param  \Closure $callback
     * @param  string   $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereNested', function (Closure $callback, $boolean = 'and') {
        call_user_func($callback, $query = $this->forNestedWhere());

        return $this->removeNestedWhereQuery($query, $boolean);
    });
}

if (!Builder::hasMacro('removeNestedWhereQuery')) {
    /**
     * Remove another query builder as a nested where from the query builder.
     *
     * @param  \Illuminate\Database\Query\Builder|static $query
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeNestedWhereQuery', function ($query, $boolean = 'and') {
        if (count($query->wheres)) {
            $type = 'Nested';

            $where = compact('type', 'query', 'boolean');

            $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
                return $current === $where;
            }));

            $this->removeBinding($query->getBindings(), 'where');
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeWhereSub')) {
    /**
     * Remove a full sub-select from the query.
     *
     * @param  string   $column
     * @param  string   $operator
     * @param  \Closure $callback
     * @param  string   $boolean
     * @return $this
     */
    Builder::macro('removeWhereSub', function ($column, $operator, Closure $callback, $boolean) {
        $type = 'Sub';

        // Once we have the query instance we can simply execute it so it can add all
        // of the sub-select's conditions to itself, and then we can cache it off
        // in the array of where clauses for the "main" parent query instance.
        call_user_func($callback, $query = $this->newQuery());

        $where = compact(
            'type', 'column', 'operator', 'query', 'boolean'
        );

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding($query->getBindings(), 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeWhereExists')) {
    /**
     * Remove an exists clause from the query.
     *
     * @param  \Closure $callback
     * @param  string   $boolean
     * @param  bool     $not
     * @return $this
     */
    Builder::macro('removeWhereExists', function (Closure $callback, $boolean = 'and', $not = false) {
        $query = $this->newQuery();

        // Similar to the sub-select clause, we will create a new query instance so
        // the developer may cleanly specify the entire exists query and we will
        // compile the whole thing in the grammar and insert it into the SQL.
        call_user_func($callback, $query);

        return $this->removeWhereExistsQuery($query, $boolean, $not);
    });
}

if (!Builder::hasMacro('removeOrWhereExists')) {
    /**
     * Remove an or exists clause from the query.
     *
     * @param  \Closure $callback
     * @param  bool     $not
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereExists', function (Closure $callback, $not = false) {
        return $this->removeWhereExists($callback, 'or', $not);
    });
}

if (!Builder::hasMacro('removeWhereNotExists')) {
    /**
     * Remove a where not exists clause from the query.
     *
     * @param  \Closure $callback
     * @param  string   $boolean
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeWhereNotExists', function (Closure $callback, $boolean = 'and') {
        return $this->removeWhereExists($callback, $boolean, true);
    });
}

if (!Builder::hasMacro('removeOrWhereNotExists')) {
    /**
     * Remove a where not exists clause from the query.
     *
     * @param  \Closure  $callback
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrWhereNotExists', function (Closure $callback) {
        return $this->removeOrWhereExists($callback, true);
    });
}

if (!Builder::hasMacro('removeWhereExistsQuery')) {
    /**
     * Remove an exists clause from the query.
     *
     * @param  \Illuminate\Database\Query\Builder $query
     * @param  string  $boolean
     * @param  bool  $not
     * @return $this
     */
    Builder::macro('removeWhereExistsQuery', function (Builder $query, $boolean = 'and', $not = false) {
        $type = $not ? 'NotExists' : 'Exists';

        $where = compact('type', 'operator', 'query', 'boolean');

        $this->wheres = array_values(array_filter($this->wheres, function ($current) use ($where) {
            return $current === $where;
        }));

        $this->removeBinding($query->getBindings(), 'where');

        return $this;
    });
}

if (!Builder::hasMacro('removeDynamicWhere')) {
    /**
     * Handles removal of dynamic "where" clauses from the query.
     *
     * @param  string  $method
     * @param  string  $parameters
     * @return $this
     */
    Builder::macro('removeDynamicWhere', function ($method, $parameters) {
        $finder = substr($method, 5);

        $segments = preg_split(
            '/(And|Or)(?=[A-Z])/', $finder, -1, PREG_SPLIT_DELIM_CAPTURE
        );

        // The connector variable will determine which connector will be used for the
        // query condition. We will change it as we come across new boolean values
        // in the dynamic method strings, which could contain a number of these.
        $connector = 'and';

        $index = 0;

        foreach ($segments as $segment) {
            // If the segment is not a boolean connector, we can assume it is a column's name
            // and we will add it to the query as a new constraint as a where clause, then
            // we can keep iterating through the dynamic method string's segments again.
            if ($segment != 'And' && $segment != 'Or') {
                $this->removeDynamic($segment, $connector, $parameters, $index);

                $index++;
            }

            // Otherwise, we will store the connector so we know how the next where clause we
            // find in the query should be connected to the previous ones, meaning we will
            // have the proper boolean connector to connect the next where clause found.
            else {
                $connector = $segment;
            }
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeDynamic')) {
    /**
     * Remove a single dynamic where clause statement from the query.
     *
     * @param  string  $segment
     * @param  string  $connector
     * @param  array   $parameters
     * @param  int     $index
     * @return void
     */
    Builder::macro('removeDynamic', function ($segment, $connector, $parameters, $index) {
        // Once we have parsed out the columns and formatted the boolean operators we
        // are ready to add it to this query as a where clause just like any other
        // clause on the query. Then we'll increment the parameter index values.
        $bool = strtolower($connector);

        $this->removeWhere(Str::snake($segment), '=', $parameters[$index], $bool);
    });
}

if (!Builder::hasMacro('removeGroupBy')) {
    /**
     * Remove a "group by" clause to the query.
     *
     * @param  array  ...$groups
     * @return $this
     */
    Builder::macro('removeGroupBy', function (...$groups) {
        foreach ($groups as $group) {
            $this->groups = array_diff(
                (array) $this->groups,
                array_wrap($group)
            );
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeHaving')) {
    /**
     * Remove a "having" clause from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  string  $value
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeHaving', function ($column, $operator = null, $value = null, $boolean = 'and') {
        $type = 'Basic';

        // Here we will make some assumptions about the operator. If only 2 values are
        // passed to the method, we will assume that the operator is an equals sign
        // and keep going. Otherwise, we'll require the operator to be passed in.
        list($value, $operator) = $this->prepareValueAndOperator(
            $value, $operator, func_num_args() == 2
        );

        // If the given operator is not found in the list of valid operators we will
        // assume that the developer is just short-cutting the '=' operators and
        // we will set the operators to '=' and set the values appropriately.
        if ($this->invalidOperator($operator)) {
            list($value, $operator) = [$operator, '='];
        }

        $having = compact('type', 'column', 'operator', 'value', 'boolean');

        $this->havings = array_values(array_filter($this->havings, function ($current) use ($having) {
            return $current === $having;
        }));

        if (!$value instanceof Expression) {
            $this->removeBinding($value, 'having');
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeOrHaving')) {
    /**
     * Remove a "or having" clause from the query.
     *
     * @param  string  $column
     * @param  string  $operator
     * @param  string  $value
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrHaving', function ($column, $operator = null, $value = null) {
        return $this->removeHaving($column, $operator, $value, 'or');
    });
}

if (!Builder::hasMacro('removeHavingRaw')) {
    /**
     * Remove a raw having clause from the query.
     *
     * @param  string  $sql
     * @param  array   $bindings
     * @param  string  $boolean
     * @return $this
     */
    Builder::macro('removeHavingRaw', function ($sql, array $bindings = [], $boolean = 'and') {
        $type = 'Raw';

        $having = compact('type', 'sql', 'boolean');

        $this->havings = array_values(array_filter($this->havings, function ($current) use ($having) {
            return $current === $having;
        }));

        $this->removeBinding($bindings, 'having');

        return $this;
    });
}

if (!Builder::hasMacro('removeOrHavingRaw')) {
    /**
     * Remove a raw or having clause from the query.
     *
     * @param  string  $sql
     * @param  array   $bindings
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOrHavingRaw', function ($sql, array $bindings = []) {
        return $this->removeHavingRaw($sql, $bindings, 'or');
    });
}

if (!Builder::hasMacro('removeOrderBy')) {
    /**
     * Remove an "order by" clause from the query.
     *
     * @param  string  $column
     * @param  string  $direction
     * @return $this
     */
    Builder::macro('removeOrderBy', function ($column, $direction = 'asc') {
        $order = [
            'column' => $column,
            'direction' => strtolower($direction) == 'asc' ? 'asc' : 'desc',
        ];

        $this->{$this->unions ? 'unionOrders' : 'orders'} = array_values(array_filter($this->{$this->unions ? 'unionOrders' : 'orders'}), function ($current) use ($order) {
            return $current === $order;
        });

        return $this;
    });
}

if (!Builder::hasMacro('removeOrderByDesc')) {
    /**
     * Remove a descending "order by" clause from the query.
     *
     * @param  string  $column
     * @return $this
     */
    Builder::macro('removeOrderByDesc', function ($column) {
        return $this->removeOrderBy($column, 'desc');
    });
}

if (!Builder::hasMacro('removeLatest')) {
    /**
     * Remove an "order by" clause for a timestamp from the query.
     *
     * @param  string  $column
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeLatest', function ($column = 'created_at') {
        return $this->removeOrderBy($column, 'desc');
    });
}

if (!Builder::hasMacro('removeOldest')) {
    /**
     * Remove an "order by" clause for a timestamp from the query.
     *
     * @param  string  $column
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeOldest', function ($column = 'created_at') {
        return $this->removeOrderBy($column, 'asc');
    });
}

if (!Builder::hasMacro('removeOrderByRaw')) {
    /**
     * Remove a raw "order by" clause from the query.
     *
     * @param  string  $sql
     * @param  array  $bindings
     * @return $this
     */
    Builder::macro('removeOrderByRaw', function ($sql, $bindings = []) {
        $type = 'Raw';

        $order = compact('type', 'sql');

        $this->{$this->unions ? 'unionOrders' : 'orders'} = array_values(array_filter($this->{$this->unions ? 'unionOrders' : 'orders'}), function ($current) use ($order) {
            return $current === $order;
        });

        $this->removeBinding($bindings, 'order');

        return $this;
    });
}

if (!Builder::hasMacro('getOffset')) {
    /**
     * Set the "offset" value of the query.
     *
     * @param  int  $value
     * @return $this
     */
    Builder::macro('getOffset', function () {
        $property = $this->unions ? 'unionOffset' : 'offset';

        return $this->$property;
    });
}

if (!Builder::hasMacro('removeOffset')) {
    /**
     * Set the "offset" value of the query.
     *
     * @param  int  $value
     * @return $this
     */
    Builder::macro('removeOffset', function () {
        $property = $this->unions ? 'unionOffset' : 'offset';

        $this->$property = 0;

        return $this;
    });
}

if (!Builder::hasMacro('give')) {
    /**
     * Give back a subset of the "limit" value from the query.
     * Opposite of take.
     *
     * @param  int  $value
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('give', function ($value) {
        return $this->free($value);
    });
}

if (!Builder::hasMacro('free')) {
    /**
     * Free up values from a limit.
     * Less values are limited.
     *
     * @param  int  $value
     * @return $this
     */
    Builder::macro('free', function ($value) {
        $property = $this->unions ? 'unionLimit' : 'limit';

        if ($value >= 0) {
            $this->$property = $this->$property - $value;
        }

        return $this;
    });
}

if (!Builder::hasMacro('removeLimit')) {
    /**
     * Remove the "limit" value from the query.
     *
     * @param  int  $value
     * @return $this
     */
    Builder::macro('removeLimit', function ($value) {
        $property = $this->unions ? 'unionLimit' : 'limit';

        if ($value >= 0) {
            $this->$property = null;
        }

        return $this;
    });
}

if (!Builder::hasMacro('getLimit')) {
    /**
     * Get the "limit" value from the query.
     *
     * @param  int  $value
     * @return $this
     */
    Builder::macro('getLimit', function ($value) {
        $property = $this->unions ? 'unionLimit' : 'limit';

        return $this->$property;
    });
}

if (!Builder::hasMacro('removeUnion')) {
    /**
     * Remove a union statement from the query.
     *
     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
     * @param  bool  $all
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeUnion', function ($query, $all = false) {
        if ($query instanceof Closure) {
            call_user_func($query, $query = $this->newQuery());
        }

        $this->unions[] = compact('query', 'all');

        $this->addBinding($query->getBindings(), 'union');

        return $this;
    });
}

if (!Builder::hasMacro('removeUnionAll')) {
    /**
     * Remove a union all statement from the query.
     *
     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
     * @return \Illuminate\Database\Query\Builder|static
     */
    Builder::macro('removeUnionAll', function ($query) {
        return $this->union($query, true);
    });
}

if (!Builder::hasMacro('selectAggregate')) {
    /**
     * Add a sub-select aggregate expression to the query.
     *
     * @param  \Closure|\Illuminate\Database\Query\Builder|string $query
     * @param  string  $as
     * @return \Illuminate\Database\Query\Builder|static
     *
     * @throws \InvalidArgumentException
     */
    Builder::macro('selectAggregate', function ($function, $query, $as) {
        // If the given query is a Closure, we will execute it while passing in a new
        // query instance to the Closure. This will give the developer a chance to
        // format and work with the query before we cast it to a raw SQL string.
        if ($query instanceof Closure) {
            $callback = $query;

            $callback($query = $this->newQuery());
        }

        // Here, we will parse this query into an SQL string and an array of bindings
        // so we can add it to the query builder using the selectRaw method so the
        // query is included in the real SQL generated by this builder instance.
        list($query, $bindings) = $this->parseSelectAggregate($query);

        return $this->selectRaw(
            $function . '(' . $query . ') as ' . $this->grammar->wrap($as), $bindings
        );
    });
}

if (!Builder::hasMacro('removeSelectAggregate')) {
    /**
     * Remove a sub-select aggregate expression from the query.
     *
     * @param  \Closure|\Illuminate\Database\Query\Builder|string $query
     * @param  string  $as
     * @return \Illuminate\Database\Query\Builder|static
     *
     * @throws \InvalidArgumentException
     */
    Builder::macro('removeSelectAggregate', function ($function, $query, $as) {
        // If the given query is a Closure, we will execute it while passing in a new
        // query instance to the Closure. This will give the developer a chance to
        // format and work with the query before we cast it to a raw SQL string.
        if ($query instanceof Closure) {
            $callback = $query;

            $callback($query = $this->newQuery());
        }

        // Here, we will parse this query into an SQL string and an array of bindings
        // so we can add it to the query builder using the selectRaw method so the
        // query is included in the real SQL generated by this builder instance.
        list($query, $bindings) = $this->parseSelectAggregate($query);

        return $this->removeSelectRaw(
            $function . '(' . $query . ') as ' . $this->grammar->wrap($as), $bindings
        );
    });
}

if (!Builder::hasMacro('parseSelectAggregate')) {
    /**
     * Parse the sub-select query into SQL and bindings.
     *
     * @param  mixed  $query
     * @return array
     */
    Builder::macro('parseSelectAggregate', function ($query) {
        if ($query instanceof self) {
            $query->columns = [$query->columns[0]];

            return [$query->toSql(), $query->getBindings()];
        } elseif (is_string($query)) {
            return [$query, []];
        } else {
            throw new InvalidArgumentException;
        }
    });
}

if (!Builder::hasMacro('if')) {
    /**
     * Add a where clause if a certain condition is met.
     * @return Builder
     */
    Builder::macro('if', function ($condition, $column, $operator, $value) {
        if ($condition) {
            return $this->where($column, $operator, $value);
        }

        return $this;
    });
}

if (!Builder::hasMacro('last')) {
    /**
     * Obtain the last item.
     * @return Collection
     */
    Builder::macro('last', function ($column = 'created_at') {
        return $this->lastest($column)->first();
    });
}

if (!Builder::hasMacro('orderByRandom')) {
    /**
     * Create a random raw orderby
     * @return Builder
     */
    Builder::macro("orderByRandom", function () {
        $randomFunctions = [
            "mysql" => "RAND()",
            "pgsql" => "RANDOM()",
            "sqlite" => "RANDOM()",
            "sqlsrv" => "NEWID()",
        ];
        $driver = $this->getConnection()->getDriverName();
        return $this->orderByRaw($randomFunctions[$driver]);
    });
}

if (!Builder::hasMacro('lists')) {
    /**
     * Returns an array of results containing
     * the values of the specified column.
     *
     * @return array
     */
    Builder::macro("lists", function ($column) {
        return $this->pluck($column)->toArray();
    });
}

if (!Builder::hasMacro('firstOrFail')) {
    /**
     * Find the first record or throw an
     * exception.
     *
     * @return Model
     * @throws Exception
     */
    Builder::macro("firstOrFail", function () {
        if ($record = $this->first()) {
            return $record;
        }
        throw new Exception('No records found');
    });
}

if (!Builder::hasMacro('toCollection')) {
    /**
     * Return a standard Collection object
     * instead of an Eloquent Collection.
     *
     * @return Collection
     */
    Builder::macro('toCollection', function () {
        return collect($this->get()->toArray());
    });
}

if (!Builder::hasMacro('toCollectionStrict')) {
    /**
     * Transform all nested array's within the
     * resulting collection into standard
     * collection objects.
     *
     * @return Collection
     */
    Builder::macro('toCollectionStrict', function () {
        $recurse = function (array $array) use (&$recurse) {
            foreach ($array as $key => $value) {
                if (is_array($value)) {
                    $value = $recurse($value);
                    $array[$key] = $value;
                } elseif ($value instanceof stdClass) {
                    $value = $recurse((array) $value);
                    $array[$key] = $value;
                }
            }
            return collect($array);
        };

        return $recurse($this->get()->toArray());
    });
}

if (!Builder::hasMacro('toArrayStrict')) {
    /**
     * Return a series of arrays as the result
     * transforms any stdClass or Collection
     * Objects into arrays including the parent
     * wrapper.
     *
     * @return array
     */
    Builder::macro('toArrayStrict', function () {

        $recurse = function ($item) use (&$recurse) {

            foreach ($array as $key => $value) {
                if ($value instanceof Collection) {
                    $value = $recurse($value->toArray());
                    $array[$key] = $value;
                } elseif ($value instanceof stdClass) {
                    $value = $recurse((array) $value);
                    $array[$key] = $value;
                }
            }
            return $array;
        };

        return $recurse($this->get()->toArray());
    });
}

if (!Builder::hasMacro('toGeneric')) {
    /**
     * Return stdClass Objects as the result.
     * @return Object
     */
    Builder::macro('toGeneric', function () {
        $json = $this->get()->toJson();
        return json_decode($json, false);
    });
}
